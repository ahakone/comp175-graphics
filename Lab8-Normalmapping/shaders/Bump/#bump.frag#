//fragment shader, create a file for it named fragment.frag
#version 120

uniform sampler2D brick_image;  // The brick texture
uniform sampler2D bump_image; // The bump map

uniform vec4 lightValue;
uniform int drawingSphere;

void main()
{

    // TODO: your job is to use the light vector (which you will pass in) and
    // the normal from the bump_image to create the normal mapping effect.

    vec4 normLightValue = normalize(lightValue);

    // gl_FragColor is a vec4 representing the final rgba values of the pixel
    // note that the use of swizzling (.st or .rgb) is the same as using .xyz
    // these symbols are interchangeable.
    // In other words, gl_TexCoord[0].xy would work the same here. Try it!
    // Whereas if you write .rgb vs .gbr, you are switching the ordering of
    // of the vector. Fun stuff!!

    if (drawingSphere == 1) {
        gl_FragColor = vec4(255, 0, 0, 0);
    }
    else {
        float dotted = dot(
            normLightValue,
            vec4(texture2D(bump_image, gl_TexCoord[0].st).rgb, 1.0)
            );
        gl_FragColor = dotted * vec4(texture2D(brick_image, gl_TexCoord[0].st).rgb, 1.0);
    }
}


= vec4(dotted*vec3(1, 1, 1), 1)